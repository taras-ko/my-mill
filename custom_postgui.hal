# Include your customized HAL commands here
# The commands in this file are run after the AXIS GUI (including PyVCP panel) starts

sets spindle-at-speed true

# Joystick

# load joyhandle component and attach to threads (in this case 3 instances)
loadrt joyhandle count=4
addf joyhandle.0 servo-thread   # x
addf joyhandle.1 servo-thread   # y
addf joyhandle.2 servo-thread   # z
addf joyhandle.3 servo-thread   # spindle-speed

# Not foun
setp halui.jog-speed   1500	# desired maximum jog speed mm/min

# --Start-- These parameters ara used to set up joyhandle

#Not found
setp halui.jog-deadband   0.	# important: default value is 0.2, that would override joyhandle.deadband

setp joyhandle.0.power 3.	# select nonlinearity to handele low jog values
setp joyhandle.1.power 3.
setp joyhandle.2.power 4.	# in my case the z-axis is set up more sensitive
setp joyhandle.3.power 4.

setp joyhandle.0.deadband 0.1
setp joyhandle.1.deadband 0.1
setp joyhandle.2.deadband 0.1
setp joyhandle.3.deadband 0.1
setp joyhandle.0.scale  1.	
setp joyhandle.1.scale -1.	# negative values invert jogging
setp joyhandle.2.scale -0.1    # in my case the z-axis is scaled to lower speed
setp joyhandle.3.scale -1.	
# --End--

# connect hal_input to halui via joyhandle (in case use your own axes-names)

net velX input.0.abs-x-position => joyhandle.0.in
net velXout joyhandle.0.out => halui.jog.0.analog

net velY input.0.abs-y-position => joyhandle.1.in
net velYout joyhandle.1.out => halui.jog.1.analog

net velZ input.0.abs-rz-position => joyhandle.2.in
net velZout joyhandle.2.out => halui.jog.2.analog

# Jog safety

loadrt or2 count=2
loadrt mux4 count=1

addf or2.0 servo-thread
addf or2.1 servo-thread
addf mux4.0 servo-thread

setp mux4.0.in0 0
setp mux4.0.in1 750
setp mux4.0.in2 1500
setp mux4.0.in3 6540

net remote-speed-slow or2.0.in0 input.0.btn-joystick
net remote-speed-medium or2.1.in0 input.0.btn-thumb
net remote-speed-fast or2.0.in1 or2.1.in1 input.0.btn-thumb2

net joy-speed-1 mux4.0.sel0 <= or2.0.out
net joy-speed-2 mux4.0.sel1 <= or2.1.out
net joy-speed-final halui.jog-speed <= mux4.0.out

# Program control
loadrt and2 count=6

addf and2.0 servo-thread
net safety_sig and2.0.in0 <= input.0.btn-top2
net run_sig and2.0.in1 <= input.0.btn-base4
net _run halui.mode.auto <= and2.0.out

addf and2.5 servo-thread
net run_sig => and2.5.in0
net is_auto and2.5.in1 <= halui.mode.is-auto
net run halui.program.run <= and2.5.out

addf and2.1 servo-thread
net is_running and2.1.in0 <= halui.program.is-running
net run_sig => and2.1.in1
net pause halui.program.pause <= and2.1.out

addf and2.2 servo-thread
net is_paused and2.2.in0 <= halui.program.is-paused
net run_sig => and2.2.in1
net resume halui.program.resume <= and2.2.out

# Spindle
addf and2.3 servo-thread
net safety_sig => and2.3.in0
net _spindle_sig and2.3.in1 <= input.0.btn-base6
net spindle_on halui.spindle.start <= and2.3.out

addf and2.4 servo-thread
net is_on and2.4.in0 <= halui.spindle.is-on
net _spindle_sig => and2.4.in1
net spindle_off halui.spindle.stop <= and2.4.out

#loadrt threads name1=floating-thread period1=1000000 fp1=1
loadrt conv_float_s32 count=1
loadrt conv_s32_bit count=1

addf conv-float-s32.0 servo-thread
addf conv-s32-bit.0 servo-thread

#net velX input.0.abs-z-position => joyhandle.0.in
#net velXout joyhandle.0.out => halui.jog.0.analog

#net spindleRPM input.0.abs-rz-position => joyhandle.3.in
net spindleRPMout joyhandle.3.out => conv-float-s32.0.in
net spindles32toBit conv-float-s32.0.out => conv-s32-bit.0.in
net spindlesIncrease conv-s32-bit.0.out => halui.spindle.increase # rising edge increase by 100


#Hooking up cycle timer
loadrt time
loadrt not
addf time.0 servo-thread
addf not.0 servo-thread
net prog-running not.0.in <= halui.program.is-idle
net cycle-timer time.0.start <= not.0.out
net cycle-seconds timerpanel.seconds <= time.0.seconds
net cycle-minutes timerpanel.minutes <= time.0.minutes
net cycle-hours timerpanel.hours <= time.0.hours
net progress timerpanel.progress-bar <= gmoccapy.program.progress
net length timerpanel.program-length <= gmoccapy.program.length
net current timerpanel.current-line <= gmoccapy.program.current-line
